plugins {
	id 'java'
	id 'application'
	id 'de.undercouch.download' version '5.3.0'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
	id "io.mateo.cxf-codegen" version "1.0.3"
}

import io.mateo.cxf.codegen.wsdl2java.Wsdl2Java

sourceCompatibility = 17
targetCompatibility = 17
compileJava.options.encoding = 'UTF-8'

def myVersion = System.properties['versionOverride']
if ((myVersion?.trim())){
	version = myVersion
} else {
	version = "1.0-SNAPSHOT"
}

bootJar.enabled = false
jar.enabled = true

applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:6001"]

test {
    ignoreFailures = false
	useJUnitPlatform()
}

repositories {
	mavenCentral()
	maven { url 'https://build.shibboleth.net/maven/releases/' } // For OpenSAML
}

mainClassName = 'dk.acto.fafnir.sso.Sso'

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

	implementation project(':ui')
	implementation project(':fafnir-client')

    implementation 'io.vavr:vavr:0.10.4'
    implementation 'com.google.guava:guava:31.1-jre'

	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'commons-codec:commons-codec:1.15'

	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-mustache"
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-saml2-service-provider'

	implementation 'org.opensaml:opensaml-core:4.2.0'
	implementation 'org.opensaml:opensaml-saml-api:4.2.0'
	implementation 'org.opensaml:opensaml-saml-impl:4.2.0'

    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
	implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'com.hazelcast:hazelcast:5.2.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
	testImplementation project(':fafnir-client')

	annotationProcessor 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'io.vavr:vavr:0.10.4'

	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'org.glassfish:jakarta.el:5.0.0-M1'

	implementation 'com.github.scribejava:scribejava-apis:8.3.3'
	implementation 'com.github.scribejava:scribejava-httpclient-okhttp:8.3.3'

	implementation 'com.auth0:java-jwt:4.3.0'

	// WSDL / Apache-cxf stuff
	implementation "jakarta.xml.ws:jakarta.xml.ws-api:4.0.0"
	implementation "jakarta.annotation:jakarta.annotation-api:2.1.1"
	cxfCodegen platform("org.apache.cxf:cxf-bom:4.0.0")
	cxfCodegen 'org.apache.cxf:cxf-rt-frontend-jaxws:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-rt-transports-http:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-core:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-tools-common:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-tools-wsdlto-core:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:4.0.0'
	cxfCodegen 'org.apache.cxf:cxf-tools-wsdlto-frontend-javascript:4.0.0'
}

tasks.register('downloadWSDLWsiBruger', Download) {
	src 'https://wsibruger.unilogin.dk/wsibruger-v6/ws?WSDL'
	dest 'src/main/resources/wsdl/wsibruger_v6.wsdl'
}

tasks.register('downloadWSDLWsiInst', Download) {
	src 'https://wsiinst.unilogin.dk/wsiinst-v5/ws?WSDL'
	dest 'src/main/resources/wsdl/wsiinst_v5.wsdl'
}

tasks.register('genWsiBruger', Wsdl2Java) {
	toolOptions {
		markGenerated.set(true)
		outputDir.set(file("$buildDir/generated/sources/wsdl"))
		wsdl.set(file('src/main/resources/wsdl/wsibruger_v6.wsdl'))
		encoding.set("UTF-8")
	}
	dependsOn downloadWSDLWsiBruger, downloadWSDLWsiInst
}

tasks.register('genWsiInst', Wsdl2Java) {
	toolOptions {
		markGenerated.set(true)
		outputDir.set(file("$buildDir/generated/sources/wsdl"))
		wsdl.set(file('src/main/resources/wsdl/wsiinst_v5.wsdl'))
		encoding.set("UTF-8")
	}
	dependsOn downloadWSDLWsiBruger, downloadWSDLWsiInst
}

compileJava.dependsOn wsdl2java

distributions {
	main {
		distTar.archiveFileName = "sso.tar"
		distZip.enabled = false
		bootDistTar.enabled = false
		bootDistZip.enabled = false
	}
}
