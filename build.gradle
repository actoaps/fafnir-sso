plugins {
    id 'java'
    id 'org.sonarqube' version '3.0' apply false
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

subprojects {
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "FAILED",
                    "PASSED",
                    "SKIPPED"
            "STANDARD_OUT"
            exceptionFormat "FULL"
            showExceptions true
            showCauses true
            showStackTraces true
        }
    }

    apply plugin: 'jacoco'

    plugins.withId('java') {
        jacoco {
            toolVersion = "0.8.7"
        }

        jacocoTestReport {
            dependsOn(test)
            reports {
                xml.enabled true
                csv.enabled false
                html.destination file("${buildDir}/jacocoHtml")
            }
        }

        test.finalizedBy(jacocoTestReport)
    }
}

if (System.properties['sonar.login'] != null) {
    apply plugin: 'org.sonarqube'

    subprojects {
        plugins.withId('com.github.node-gradle.node') {
            sonarqube {
                properties {
                    property "sonar.sources", "src"
                }
            }
        }
        plugins.withId('java') {
            sonarqube {
                properties {
                    property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco"
                }
            }
        }
    }

    project.subprojects.each {build.dependsOn(":${it.name}:build")}

    task sonarAnalysis(group:"Sonarqube") {
        Task sonarTask = project.getTasks().getByName('sonarqube')
        doLast {
            sonarTask.run()
        }
    }
    build.finalizedBy(sonarAnalysis)
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

